apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "15"
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"name":"web","namespace":"default"},"spec":{"replicas":3,"selector":{"matchLabels":{"app":"web"}},"template":{"metadata":{"labels":{"app":"web"}},"spec":{"containers":[{"args":["# Copy patched settings.py if it exists\nif [ -f /shared/settings.py ]; then\n  cp /shared/settings.py /app/statuspage/statuspage/settings.py\n  echo \"Using patched settings.py for ElastiCache compatibility\"\nfi\n\n# Copy gunicorn.py if it exists\nif [ -f /shared/gunicorn.py ]; then\n  cp /shared/gunicorn.py /app/statuspage/gunicorn.py\n  echo \"Using created gunicorn.py file\"\nfi\n\n# Start the application normally\nexec /entrypoint.sh\n"],"command":["/bin/sh","-c"],"env":[{"name":"STATUS_PAGE_CONFIGURATION","value":"statuspage.configuration"},{"name":"POSTGRES_PASSWORD","valueFrom":{"secretKeyRef":{"key":"POSTGRES_PASSWORD","name":"status-page-secrets"}}},{"name":"SERVICE_NAME","value":"web"}],"image":"992382545251.dkr.ecr.us-east-1.amazonaws.com/benami:status-page","name":"web","ports":[{"containerPort":8001}],"volumeMounts":[{"mountPath":"/app/statuspage/statuspage/configuration.py","name":"status-page-config","subPath":"configuration.py"},{"mountPath":"/shared","name":"shared-settings"}]}],"initContainers":[{"command":["python3","-c","import re\nprint(\"Fixing ElastiCache RQ_QUEUES issue...\")\n\n# Read settings.py\nwith open('/app/statuspage/statuspage/settings.py', 'r') as f:\n    content = f.read()\n\n# Replace ElastiCache condition to force RQ_QUEUES setup\ncontent = re.sub(\n    r'if not TASKS_REDIS_HOST\\.endswith\\(\\'\\.cache\\.amazonaws\\.com\\'\\):',\n    'if True:  # Patched: Force RQ queues setup for ElastiCache',\n    content\n)\n\n# Remove the else block that disables RQ_QUEUES\ncontent = re.sub(\n    r'else:\\s*\\n\\s*# For ElastiCache.*?print\\(\"Warning: Skipping RQ queue setup.*?\\n',\n    '',\n    content,\n    flags=re.DOTALL\n)\n\n# Write the patched file to shared volume\nwith open('/shared/settings.py', 'w') as f:\n    f.write(content)\n\nprint(\"ElastiCache RQ_QUEUES patch applied successfully!\")\n"],"image":"992382545251.dkr.ecr.us-east-1.amazonaws.com/benami:status-page","name":"fix-elasticache-rq","volumeMounts":[{"mountPath":"/shared","name":"shared-settings"}]},{"command":["python3","-c","print(\"Creating gunicorn.py file...\")\ngunicorn_content = '''\n# Gunicorn configuration file\nbind = \"0.0.0.0:8001\"\nworkers = 4\ntimeout = 300\naccesslog = \"-\"\nerrorlog = \"-\"\ncapture_output = True\nloglevel = \"info\"\n'''\n\nwith open('/shared/gunicorn.py', 'w') as f:\n    f.write(gunicorn_content)\n\nprint(\"gunicorn.py file created successfully!\")\n"],"image":"992382545251.dkr.ecr.us-east-1.amazonaws.com/benami:status-page","name":"fix-gunicorn","volumeMounts":[{"mountPath":"/shared","name":"shared-settings"}]},{"command":["sh","-c","until nc -z -v -w30 benami-postgres.cx248m4we6k7.us-east-1.rds.amazonaws.com 5432; do echo \"Waiting for PostgreSQL...\"; sleep 5; done; echo \"PostgreSQL is up!\""],"image":"busybox:1.28","name":"wait-for-postgres"}],"serviceAccountName":"status-page-sa","volumes":[{"configMap":{"name":"status-page-config"},"name":"status-page-config"},{"emptyDir":{},"name":"shared-settings"}]}}}}
    meta.helm.sh/release-name: status-page-eks
    meta.helm.sh/release-namespace: default
  creationTimestamp: "2025-09-18T20:22:11Z"
  generation: 16
  labels:
    app.kubernetes.io/managed-by: Helm
  name: web
  namespace: default
  resourceVersion: "447945"
  uid: b82bc834-0aa4-40ab-9b9f-ac4c33bf62c3
spec:
  progressDeadlineSeconds: 600
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: web
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/restartedAt: "2025-09-19T09:56:00+03:00"
      creationTimestamp: null
      labels:
        app: web
    spec:
      containers:
      - args:
        - |
          # Copy patched settings.py if it exists
          if [ -f /shared/settings.py ]; then
            cp /shared/settings.py /app/statuspage/statuspage/settings.py
            echo "Using patched settings.py for ElastiCache compatibility"
          fi

          # Copy gunicorn.py if it exists
          if [ -f /shared/gunicorn.py ]; then
            cp /shared/gunicorn.py /app/statuspage/gunicorn.py
            echo "Using created gunicorn.py file"
          fi

          # Start the application normally
          exec /entrypoint.sh
        command:
        - /bin/sh
        - -c
        env:
        - name: STATUS_PAGE_CONFIGURATION
          value: statuspage.configuration
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRES_PASSWORD
              name: status-page-secrets
        - name: SERVICE_NAME
          value: web
        image: 992382545251.dkr.ecr.us-east-1.amazonaws.com/benami:status-page
        imagePullPolicy: IfNotPresent
        name: web
        ports:
        - containerPort: 8001
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /app/statuspage/statuspage/configuration.py
          name: status-page-config
          subPath: configuration.py
        - mountPath: /shared
          name: shared-settings
      dnsPolicy: ClusterFirst
      initContainers:
      - command:
        - python3
        - -c
        - |
          import re
          print("Fixing ElastiCache RQ_QUEUES issue and STATIC_URL...")

          # Read settings.py
          with open('/app/statuspage/statuspage/settings.py', 'r') as f:
              content = f.read()

          # Replace ElastiCache condition to force RQ_QUEUES setup
          content = re.sub(
              r"if not TASKS_REDIS_HOST\.endswith\('\.cache\.amazonaws\.com'\):",
              'if True:  # Patched: Force RQ queues setup for ElastiCache',
              content
          )

          # Remove the else block that disables RQ_QUEUES
          content = re.sub(
              r'else:\s*\n\s*# For ElastiCache.*?print\("Warning: Skipping RQ queue setup.*?\n',
              '',
              content,
              flags=re.DOTALL
          )

          # Ensure STATIC_URL uses configuration fallback to CloudFront URL
          content = re.sub(
              r'^\s*STATIC_URL\s*=.*$',
              "STATIC_URL = getattr(configuration, 'STATIC_URL', f'/{BASE_PATH}static/')",
              content,
              flags=re.MULTILINE
          )

          # Write the patched file to shared volume
          with open('/shared/settings.py', 'w') as f:
              f.write(content)

          print("Patches applied successfully!")
        image: 992382545251.dkr.ecr.us-east-1.amazonaws.com/benami:status-page
        imagePullPolicy: IfNotPresent
        name: fix-elasticache-rq
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /shared
          name: shared-settings
      - command:
        - python3
        - -c
        - |
          print("Creating gunicorn.py file...")
          gunicorn_content = '''
          # Gunicorn configuration file
          bind = "0.0.0.0:8001"
          workers = 4
          timeout = 300
          accesslog = "-"
          errorlog = "-"
          capture_output = True
          loglevel = "info"
          '''

          with open('/shared/gunicorn.py', 'w') as f:
              f.write(gunicorn_content)

          print("gunicorn.py file created successfully!")
        image: 992382545251.dkr.ecr.us-east-1.amazonaws.com/benami:status-page
        imagePullPolicy: IfNotPresent
        name: fix-gunicorn
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /shared
          name: shared-settings
      - command:
        - sh
        - -c
        - until nc -z -v -w30 benami-postgres.cx248m4we6k7.us-east-1.rds.amazonaws.com
          5432; do echo "Waiting for PostgreSQL..."; sleep 5; done; echo "PostgreSQL
          is up!"
        image: busybox:1.28
        imagePullPolicy: IfNotPresent
        name: wait-for-postgres
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: status-page-sa
      serviceAccountName: status-page-sa
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: status-page-config
        name: status-page-config
      - emptyDir: {}
        name: shared-settings
status:
  availableReplicas: 3
  conditions:
  - lastTransitionTime: "2025-09-18T20:48:32Z"
    lastUpdateTime: "2025-09-18T20:48:32Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  - lastTransitionTime: "2025-09-18T20:22:11Z"
    lastUpdateTime: "2025-09-19T06:56:13Z"
    message: ReplicaSet "web-db56cb69" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  observedGeneration: 16
  readyReplicas: 3
  replicas: 3
  updatedReplicas: 3
