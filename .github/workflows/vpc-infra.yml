name: VPC Infra (With S3 Backend Only, BenAmiVPC)

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'apply or destroy'
        required: true
        default: 'apply'
        type: choice
        options: [apply, destroy]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  TF_IN_AUTOMATION: true
  TF_INPUT: false

jobs:
  run:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Create Terraform config
        run: |
          mkdir -p infra
          cat > infra/main.tf <<'HCL'
          terraform {
            required_version = ">= 1.5.0"
            required_providers {
              aws = {
                source  = "hashicorp/aws"
                version = "~> 5.0"
              }
            }
            backend "s3" {
              bucket         = "benami-terraform-state"
              key            = "network/vpc/terraform.tfstate"
              region         = "us-east-1"
              encrypt        = true
            }
          }

          variable "region" {
            type    = string
            default = "us-east-1"
          }

          provider "aws" {
            region = var.region
            default_tags {
              tags = {
                Owner = "benami"
              }
            }
          }

          variable "vpc_cidr" {
            type    = string
            default = "10.0.0.0/16"
          }

          variable "name" {
            type    = string
            default = "BenAmiVPC"
          }

          data "aws_availability_zones" "this" {
            state = "available"
          }

          locals {
            azs    = slice(data.aws_availability_zones.this.names, 0, 3)
            az_map = { for idx, az in local.azs : tostring(idx) => az }
          }

          resource "aws_vpc" "this" {
            cidr_block           = var.vpc_cidr
            enable_dns_hostnames = true
            enable_dns_support   = true
            tags = { Name = "${var.name}-vpc" }
          }

          resource "aws_internet_gateway" "igw" {
            vpc_id = aws_vpc.this.id
            tags   = { Name = "${var.name}-igw" }
          }

          resource "aws_subnet" "public" {
            for_each                = local.az_map
            vpc_id                  = aws_vpc.this.id
            availability_zone       = each.value
            map_public_ip_on_launch = true
            cidr_block              = cidrsubnet(var.vpc_cidr, 4, tonumber(each.key))
            tags = {
              Name = "${var.name}-public-${each.value}"
              Tier = "public"
            }
          }

          resource "aws_subnet" "private" {
            for_each          = local.az_map
            vpc_id            = aws_vpc.this.id
            availability_zone = each.value
            cidr_block        = cidrsubnet(var.vpc_cidr, 4, 8 + tonumber(each.key))
            tags = {
              Name = "${var.name}-private-${each.value}"
              Tier = "private"
            }
          }

          resource "aws_eip" "nat" {
            for_each = aws_subnet.public
            domain   = "vpc"
            tags     = { Name = "${var.name}-nat-eip-${each.key}" }
          }

          resource "aws_nat_gateway" "nat" {
            for_each      = aws_subnet.public
            allocation_id = aws_eip.nat[each.key].id
            subnet_id     = each.value.id
            depends_on    = [aws_internet_gateway.igw]
            tags          = { Name = "${var.name}-nat-${each.key}" }
          }

          resource "aws_route_table" "public" {
            vpc_id = aws_vpc.this.id
            tags   = { Name = "${var.name}-public-rt" }
          }

          resource "aws_route" "public_igw" {
            route_table_id         = aws_route_table.public.id
            destination_cidr_block = "0.0.0.0/0"
            gateway_id             = aws_internet_gateway.igw.id
          }

          resource "aws_route_table_association" "public_assoc" {
            for_each       = aws_subnet.public
            subnet_id      = each.value.id
            route_table_id = aws_route_table.public.id
          }

          resource "aws_route_table" "private" {
            for_each = local.az_map
            vpc_id   = aws_vpc.this.id
            tags     = { Name = "${var.name}-private-rt-${each.value}" }
          }

          resource "aws_route" "private_nat" {
            for_each               = local.az_map
            route_table_id         = aws_route_table.private[each.key].id
            destination_cidr_block = "0.0.0.0/0"
            nat_gateway_id         = aws_nat_gateway.nat[each.key].id
          }

          resource "aws_route_table_association" "private_assoc" {
            for_each       = local.az_map
            subnet_id      = aws_subnet.private[each.key].id
            route_table_id = aws_route_table.private[each.key].id
          }

          output "vpc_id" {
            value = aws_vpc.this.id
          }

          output "public_subnets" {
            value = [for _, s in aws_subnet.public : s.id]
          }

          output "private_subnets" {
            value = [for _, s in aws_subnet.private : s.id]
          }

          output "nat_gateway_ids" {
            value = [for _, n in aws_nat_gateway.nat : n.id]
          }

          output "internet_gateway" {
            value = aws_internet_gateway.igw.id
          }
          HCL

      - name: Terraform init
        working-directory: infra
        run: terraform init -input=false -no-color

      - name: Terraform plan
        if: ${{ inputs.action == 'apply' }}
        working-directory: infra
        run: terraform plan -out=tfplan -input=false -no-color

      - name: Terraform apply
        if: ${{ inputs.action == 'apply' }}
        working-directory: infra
        run: terraform apply -auto-approve tfplan

      - name: Terraform destroy
        if: ${{ inputs.action == 'destroy' }}
        working-directory: infra
        run: terraform destroy -auto-approve
