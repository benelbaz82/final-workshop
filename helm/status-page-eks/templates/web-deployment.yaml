apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  labels:
    app: web
spec:
  replicas: 3
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      serviceAccountName: status-page-sa
      initContainers:
        - name: fix-elasticache-rq
          image: 992382545251.dkr.ecr.us-east-1.amazonaws.com/benami:status-page
          command: ['python3', '-c']
          args:
            - |
              import re
              print("Fixing ElastiCache RQ_QUEUES issue...")
              
              # Read settings.py
              with open('/app/statuspage/statuspage/settings.py', 'r') as f:
                  content = f.read()
              
              # Replace ElastiCache condition to force RQ_QUEUES setup
              content = re.sub(
                  r'if not TASKS_REDIS_HOST\.endswith\(\'\.cache\.amazonaws\.com\'\):',
                  'if True:  # Patched: Force RQ queues setup for ElastiCache',
                  content
              )
              
              # Remove the else block that disables RQ_QUEUES
              content = re.sub(
                  r'else:\s*\n\s*# For ElastiCache.*?print\("Warning: Skipping RQ queue setup.*?\n',
                  '',
                  content,
                  flags=re.DOTALL
              )

              # Ensure STATIC_URL is pulled from configuration (CloudFront) with fallback to BASE_PATH
              content = re.sub(
                  r'^\s*STATIC_URL\s*=.*$',
                  "STATIC_URL = getattr(configuration, 'STATIC_URL', f'/{BASE_PATH}static/')",
                  content,
                  flags=re.MULTILINE
              )
              
              # Write the patched file to shared volume
              with open('/shared/settings.py', 'w') as f:
                  f.write(content)
              
              print("ElastiCache RQ_QUEUES patch applied successfully!")
          volumeMounts:
          - name: shared-settings
            mountPath: /shared
        - name: wait-for-postgres
          image: busybox:1.28  
          command: ['sh', '-c', 'until nc -z -v -w30 benami-postgres.cx248m4we6k7.us-east-1.rds.amazonaws.com 5432; do echo "Waiting for PostgreSQL..."; sleep 5; done; echo "PostgreSQL is up!"']
      containers:
        - name: web
          image: 992382545251.dkr.ecr.us-east-1.amazonaws.com/benami:status-page
          command: ["/bin/sh", "-c"]
          args: 
            - |
              # Copy patched settings.py if it exists
              if [ -f /shared/settings.py ]; then
                cp /shared/settings.py /app/statuspage/statuspage/settings.py
                echo "Using patched settings.py for ElastiCache compatibility"
              fi
              # Start the application normally
              exec /entrypoint.sh
          volumeMounts:
            - name: status-page-config
              mountPath: /app/statuspage/statuspage/configuration.py
              subPath: configuration.py
            - name: shared-settings
              mountPath: /shared
          ports:
          - containerPort: 8001
          env:
            - name: STATUS_PAGE_CONFIGURATION
              value: "statuspage.configuration"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: status-page-secrets
                  key: POSTGRES_PASSWORD
            - name: SERVICE_NAME
              value: "web"
      volumes:
        - name: status-page-config
          configMap:
            name: status-page-config
        - name: shared-settings
          emptyDir: {}
